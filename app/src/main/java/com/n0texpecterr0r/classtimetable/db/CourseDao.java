package com.n0texpecterr0r.classtimetable.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.n0texpecterr0r.classtimetable.table.bean.Course;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE".
*/
public class CourseDao extends AbstractDao<Course, Long> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property ClassStr = new Property(3, String.class, "classStr", false, "CLASS_STR");
        public final static Property CourseId = new Property(4, String.class, "courseId", false, "COURSE_ID");
        public final static Property SessionStr = new Property(5, String.class, "sessionStr", false, "SESSION_STR");
        public final static Property WeekStr = new Property(6, String.class, "weekStr", false, "WEEK_STR");
        public final static Property Day = new Property(7, String.class, "day", false, "DAY");
        public final static Property Classroom = new Property(8, String.class, "classroom", false, "CLASSROOM");
        public final static Property Teacher = new Property(9, String.class, "teacher", false, "TEACHER");
    }


    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CODE\" TEXT," + // 2: code
                "\"CLASS_STR\" TEXT," + // 3: classStr
                "\"COURSE_ID\" TEXT," + // 4: courseId
                "\"SESSION_STR\" TEXT," + // 5: sessionStr
                "\"WEEK_STR\" TEXT," + // 6: weekStr
                "\"DAY\" TEXT," + // 7: day
                "\"CLASSROOM\" TEXT," + // 8: classroom
                "\"TEACHER\" TEXT);"); // 9: teacher
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String classStr = entity.getClassStr();
        if (classStr != null) {
            stmt.bindString(4, classStr);
        }
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(5, courseId);
        }
 
        String sessionStr = entity.getSessionStr();
        if (sessionStr != null) {
            stmt.bindString(6, sessionStr);
        }
 
        String weekStr = entity.getWeekStr();
        if (weekStr != null) {
            stmt.bindString(7, weekStr);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(8, day);
        }
 
        String classroom = entity.getClassroom();
        if (classroom != null) {
            stmt.bindString(9, classroom);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(10, teacher);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String classStr = entity.getClassStr();
        if (classStr != null) {
            stmt.bindString(4, classStr);
        }
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(5, courseId);
        }
 
        String sessionStr = entity.getSessionStr();
        if (sessionStr != null) {
            stmt.bindString(6, sessionStr);
        }
 
        String weekStr = entity.getWeekStr();
        if (weekStr != null) {
            stmt.bindString(7, weekStr);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(8, day);
        }
 
        String classroom = entity.getClassroom();
        if (classroom != null) {
            stmt.bindString(9, classroom);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(10, teacher);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // classStr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // courseId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sessionStr
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // weekStr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // day
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // classroom
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // teacher
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClassStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCourseId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSessionStr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeekStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDay(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClassroom(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTeacher(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Course entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Course entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Course entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
